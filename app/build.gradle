def isIntegratedMode = isIntegratedMode.toBoolean()
//def isIntegratedMode = true
def isJitPack = false


if (isIntegratedMode) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    def versionConfig = rootProject.extensions.getByName("ext")
    compileSdkVersion versionConfig.compileSdkVersion

    defaultConfig {
        minSdkVersion versionConfig.minSdkVersion

        if (isIntegratedMode) {
            applicationId versionConfig.applicationId
            targetSdkVersion versionConfig.targetSdkVersion
            versionCode versionConfig.versionCode
            versionName versionConfig.versionName
            testInstrumentationRunner versionConfig.testInstrumentationRunner
        }
    }

    if (isJitPack) {
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
    } else {
        signingConfigs {
            /*
            * so文件需验证签名 所有debug也要加上签名
            * 关闭后核心代码将无法调用
            * */
            release {
                storeFile file('../jks/comprehensive.jks')//签名文件路径
                storePassword "comprehensive"
                keyAlias "comprehensive"
                keyPassword "comprehensive"
            }
        }

        if (isIntegratedMode) {
            buildTypes {
                release {
                    minifyEnabled true   //开启混淆
                    zipAlignEnabled true  //压缩优化
                    shrinkResources true  //移出无用资源
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.release
                }

                debug {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.release
                }
            }
            //自定义apk名称
            android.applicationVariants.all {
                variant ->
                    variant.outputs.all {
                        //这里修改apk文件名
                        //appName_versionName_variantName_releaseTime.apk
                        outputFileName = "comprehensive_v${variant.versionName}_${variant.name}_${releaseTime()}.apk"
                    }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //引入 base  arouter
    implementation project(':functionLibrary:base')
    implementation project(':commonLibrary:arouter')
    implementation project(':businessMode:launch')

    //项目初始化引入的dependencies
    implementation supportDependencies.appcompatV7
    implementation supportDependencies.constraintLayout
    implementation supportDependencies.recyclerview
    //引入 rxLifecycle
    implementation dataDependencies.rxlifecycle
    implementation dataDependencies.rxlifecycleAndroid
}

//获取打包时间
static def releaseTime() {
    return new Date().format("yyMMdd", TimeZone.getTimeZone("UTC"))
}
