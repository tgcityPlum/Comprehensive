package com.tgcity.network.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.tgcity.network.greendao.model.SearchRecordModel;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * @author TGCity
 * DAO for table "SEARCH_RECORD_MODEL".
 */
public class SearchRecordModelDao extends AbstractDao<SearchRecordModel, Long> {

    public static final String TABLENAME = "SEARCH_RECORD_MODEL";

    /**
     * Properties of entity SearchRecordModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Body = new Property(2, String.class, "body", false, "BODY");
    }


    public SearchRecordModelDao(DaoConfig config) {
        super(config);
    }

    public SearchRecordModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_RECORD_MODEL\" (" +
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"BODY\" TEXT);"); // 2: body
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_RECORD_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchRecordModel entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());

        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(3, body);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchRecordModel entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());

        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(3, body);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public SearchRecordModel readEntity(Cursor cursor, int offset) {
        SearchRecordModel entity = new SearchRecordModel(
                // id
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0),
                // type
                cursor.getInt(offset + 1),
                // body
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2)
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, SearchRecordModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setBody(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

    @Override
    protected final Long updateKeyAfterInsert(SearchRecordModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(SearchRecordModel entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchRecordModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
